name: PUBLISH

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  commit-msg:
    name: Commit message check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 100
    - name: Check commit messages
      run: |
        if git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep -q '.\{73\}'; then
          (echo -n "::error::";
           echo "Some commit message summary lines are too long. See CONTRIBUTING.md for more information.";
           echo "Invalid commits:";
           echo;
           git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep '.\{73\}';) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        fi
  clang-format:
    name: Code formatting check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Run clang-format
      run: |
        bash ./util/clang_format_all.sh
        git clean -f
    - name: Check formatting
      run: |
        git diff --quiet || (
          (echo -n "::error::";
          echo "clang-format issues were found. See CONTRIBUTING.md for more information.";
          echo;
          git diff;) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        )
  cmake-minimum:
    name: Baseline cmake check
    needs: [commit-msg, clang-format]
    runs-on: ubuntu-20.04
    env:
      QT_SELECT: qt5
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Download minimum supported cmake version
      run: |
        pushd /tmp
        wget https://cmake.org/files/v2.8/cmake-2.8.12.2-Linux-i386.tar.gz
        tar -zxvf cmake-2.8.12.2-Linux-i386.tar.gz
        popd
    - name: Install compilation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev mesa-common-dev libgl1-mesa-dev qtbase5-dev libxcb-keysyms1-dev
    - name: Configure renderdoc with cmake
      run: |
        mkdir build
        cd build
        /tmp/cmake-2.8.12.2-Linux-i386/bin/cmake -DCMAKE_BUILD_TYPE=Debug ..
  android:
    name: Android
    needs: [commit-msg, clang-format]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Install Android SDK 3859397 and NDK r14b
      run: |
        export ARCH=`uname -m`
        wget -q http://dl.google.com/android/repository/sdk-tools-linux-3859397.zip
        wget -q http://dl.google.com/android/repository/android-ndk-r14b-linux-${ARCH}.zip
        unzip -u -q android-ndk-r14b-linux-${ARCH}.zip -d $GITHUB_WORKSPACE
        unzip -u -q sdk-tools-linux-3859397.zip -d $GITHUB_WORKSPACE
        echo "ANDROID_NDK=$GITHUB_WORKSPACE/android-ndk-r14b" >> $GITHUB_ENV
        echo "ANDROID_HOME=$GITHUB_WORKSPACE/" >> $GITHUB_ENV
        
        # Answer "yes" to any license acceptance requests
        pushd $GITHUB_WORKSPACE/tools/bin
        (yes 2>/dev/null | ./sdkmanager --sdk_root=$GITHUB_WORKSPACE "build-tools;26.0.1" "platforms;android-23") || echo
        popd
    - name: Build 32
      run: |
        mkdir build-android-arm32
        pushd build-android-arm32
        cmake -DBUILD_ANDROID=On -DANDROID_ABI=armeabi-v7a -DANDROID_NATIVE_API_LEVEL=23 ..
        make -j2
        popd
    - name: Build 64
      run: |
        mkdir build-android-arm64
        pushd build-android-arm64
        cmake -DBUILD_ANDROID=On -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=23 ..
        make -j2
        popd
    - name: Upload 32
      uses: actions/upload-artifact@v2
      with:
        name: android-arm32
        path: build-android-arm32/bin/org.renderdoc.renderdoccmd.arm32.apk
    - name: Upload 64
      uses: actions/upload-artifact@v2
      with:
        name: android-arm64
        path: build-android-arm64/bin/org.renderdoc.renderdoccmd.arm64.apk
  windows:
    name: Windows
    needs: [commit-msg, clang-format, android]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [ VS2019 x64 Development ]
        include:
          - name: VS2019 x64 Development
            os: windows-2019
            compiler: VS2019
            toolset: v142
            platform: x64
            configuration: Development
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Download optional 3rdparty extras
      run: |
        curl https://renderdoc.org/qrenderdoc_3rdparty.zip -O
        7z x qrenderdoc_3rdparty.zip
    - uses: actions/download-artifact@v2
      with:
        name: android-arm32
        path: x64/Development/plugins/android/org.renderdoc.renderdoccmd.arm32.apk
    - uses: actions/download-artifact@v2
      with:
        name: android-arm64
        path: x64/Development/plugins/android/org.renderdoc.renderdoccmd.arm64.apk
    - name: Set up Visual Studio tools
      uses: microsoft/setup-msbuild@v1.1
    - name: Building solution
      run: msbuild.exe renderdoc.sln "/m" "/p:Configuration=${{ matrix.configuration }}" "/p:Platform=${{ matrix.platform }}" "/p:PlatformToolset=${{ matrix.toolset }}"
      shell: powershell
    - name: Clean
      run: ./clean.bat
    - name: Uploading
      uses: actions/upload-artifact@v2
      with:
        name: RenderDoc-Windows-${{ matrix.platform }}
        path: ./*/Development